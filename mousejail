#!/bin/sh

#FOR THIS SCRIPT TO WORK XDOTOOL NEEDS TO BE INSTALLED

SCRIPT_PATH=$(dirname $0)

# TODO: use parameter and make BORDER optional 
BORDER=$1

#check if a windowid has been specified otherwise use the currently focused window
if [ "$#" -gt 1 ]; then
    echo "Going to jail mouse in window with (decimal) ID: $2"
	WINDOW_ID=$2
else
    echo Waiting 5 seconds until focused window will be used for mousejail.
    sleep 5
    echo Done waiting, going to jail mouse in currently focused window!
    WINDOW_ID=$(xdotool getwindowfocus)
fi

create_barriers()
{
	#get info of the window
	WINDOW_INFO=$(xdotool getwindowgeometry $WINDOW_ID)
	if [ "$?" -ne 0 ]; then
		terminate
	fi
	#extract window information
	WINDOW_X_NEW=$(echo $WINDOW_INFO | awk -F'[ ,x]' '{print $4;}')
	WINDOW_Y_NEW=$(echo $WINDOW_INFO | awk -F'[ ,x]' '{print $5;}')
	WINDOW_WIDTH_NEW=$(echo $WINDOW_INFO | awk -F'[ ,x]' '{print $9;}')
	WINDOW_HEIGHT_NEW=$(echo $WINDOW_INFO | awk -F'[ ,x]' '{print $10;}')

    WINDOW_X_NEW=$(expr $WINDOW_X_NEW + $BORDER)
    WINDOW_Y_NEW=$(expr $WINDOW_Y_NEW + $BORDER)

    WINDOW_WIDTH_NEW=$(expr $WINDOW_WIDTH_NEW - $(expr $BORDER \* 2))
    WINDOW_HEIGHT_NEW=$(expr $WINDOW_HEIGHT_NEW - $(expr $BORDER \* 2))

	#check if barriers have not been created or need to be updated
	if [ "$(ps -p $BARRIER_LEFT -o comm=)" != "xbarrier" ] || [ "$WINDOW_X" != "$WINDOW_X_NEW" ] || [ "$WINDOW_Y" != "$WINDOW_Y_NEW" ] || [ "$WINDOW_WIDTH" != "$WINDOW_WIDTH_NEW" ] || [ "$WINDOW_HEIGHT" != "$WINDOW_HEIGHT_NEW" ]; then
		#destroy previous barriers
		destroy_barriers

		WINDOW_X=$WINDOW_X_NEW
		WINDOW_Y=$WINDOW_Y_NEW
		WINDOW_WIDTH=$WINDOW_WIDTH_NEW
		WINDOW_HEIGHT=$WINDOW_HEIGHT_NEW
		
		#barrier overlap
		BO=2
		#create left barrier
		$SCRIPT_PATH/xbarrier $WINDOW_X $(expr $WINDOW_Y - $BO) $WINDOW_X $(expr $WINDOW_Y + $WINDOW_HEIGHT + $BO) 1 & 
		BARRIER_LEFT=$!
		#create right barrier
		$SCRIPT_PATH/xbarrier $(expr $WINDOW_X + $WINDOW_WIDTH) $(expr $WINDOW_Y - $BO) $(expr $WINDOW_X + $WINDOW_WIDTH) $(expr $WINDOW_Y + $WINDOW_HEIGHT + $BO) 4 & 
		BARRIER_RIGHT=$!
		#create upper barrier
		$SCRIPT_PATH/xbarrier $(expr $WINDOW_X - $BO) $WINDOW_Y $(expr $WINDOW_X + $WINDOW_WIDTH + $BO) $WINDOW_Y 2 & 
		BARRIER_UP=$!
		#create lower barrier
		$SCRIPT_PATH/xbarrier $(expr $WINDOW_X - $BO) $(expr $WINDOW_Y + $WINDOW_HEIGHT) $(expr $WINDOW_X + $WINDOW_WIDTH + $BO) $(expr $WINDOW_Y + $WINDOW_HEIGHT) 8 & 
		BARRIER_DOWN=$!
	fi
}

destroy_barriers(){
	kill $BARRIER_LEFT > /dev/null 2>&1
	kill $BARRIER_RIGHT > /dev/null 2>&1
	kill $BARRIER_UP > /dev/null 2>&1
	kill $BARRIER_DOWN > /dev/null 2>&1
}

terminate()
{
	destroy_barriers
	exit 0
}

#create trap to properly destroy all barriers when the script is terminated
trap 'terminate' INT TERM

#initialize the values so the ps command works properly
BARRIER_LEFT=1
BARRIER_RIGHT=1
BARRIER_UP=1
BARRIER_DOWN=1

while true
do
	#check if window is currently focused
	if [ "$WINDOW_ID" -eq "$(xdotool getwindowfocus)" ]; then
		create_barriers
	else
		destroy_barriers
	fi
	sleep 0.1
done
